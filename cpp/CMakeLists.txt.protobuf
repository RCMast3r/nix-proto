cmake_minimum_required(VERSION 3.12)

project(${CPP_NAME} VERSION "${CPP_VERISON}")

find_package(Protobuf REQUIRED)

include(util.cmake)

set_depenencies("${CPP_DEPS}")
set(CMAKE_INSTALL_ARCHIVEDIR $ENV{dev}/lib)

set(PROTO_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated/")
file(MAKE_DIRECTORY ${PROTO_BINARY_DIR})

include(GNUInstallDirs)

set(OBJECT_LIBRARY "${PROJECT_NAME}_object")
add_library(${OBJECT_LIBRARY} OBJECT ${PROTOS})

target_include_directories(${OBJECT_LIBRARY}
                           PUBLIC $<BUILD_INTERFACE:${PROTO_BINARY_DIR}>)

target_link_libraries(${OBJECT_LIBRARY} PUBLIC protobuf::libprotobuf)

protobuf_generate(TARGET ${OBJECT_LIBRARY} IMPORT_DIRS ${PROTO_DEPS}
                  PROTOC_OUT_DIR "${PROTO_BINARY_DIR}")

set(STATIC_LIBRARY ${PROJECT_NAME})

add_library(${STATIC_LIBRARY} STATIC $<TARGET_OBJECTS:${OBJECT_LIBRARY}>)

target_include_directories(
  ${STATIC_LIBRARY} PUBLIC $<BUILD_INTERFACE:${PROTO_BINARY_DIR}>
                           $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)

target_link_libraries(${STATIC_LIBRARY} PUBLIC ${STATIC_DEPS}
                                               protobuf::libprotobuf)

set(SHARED_LIBRARY ${PROJECT_NAME}_shared)

add_library(${SHARED_LIBRARY} SHARED $<TARGET_OBJECTS:${OBJECT_LIBRARY}>)

target_include_directories(
  ${SHARED_LIBRARY} PUBLIC $<BUILD_INTERFACE:${PROTO_BINARY_DIR}>
                           $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)

target_link_libraries(${SHARED_LIBRARY} PUBLIC protobuf::libprotobuf
                                               ${SHARED_DEPS})

install(
  DIRECTORY ${PROTO_BINARY_DIR}
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  FILES_MATCHING
  PATTERN "*.pb.h")

set(TARGET_FILE ${PROJECT_NAME}Targets)

install(
  TARGETS ${STATIC_LIBRARY} ${SHARED_LIBRARY}
  EXPORT ${TARGET_FILE}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_ARCHIVEDIR})

install(
  EXPORT ${TARGET_FILE}
  FILE ${TARGET_FILE}.cmake
  DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
  NAMESPACE ${PROJECT_NAME}::)

include(CMakePackageConfigHelpers)

set(CONFIG_FILE ${PROJECT_NAME}Config.cmake)

configure_package_config_file(
  ${CONFIG_FILE}.in ${CONFIG_FILE}
  INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")

set(CONFIG_VERSION_FILE ${PROJECT_NAME}ConfigVersion.cmake)

write_basic_package_version_file(
  ${CONFIG_VERSION_FILE}
  VERSION ${CPP_VERSION}
  COMPATIBILITY SameMajorVersion)

install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${CONFIG_FILE}"
              "${CMAKE_CURRENT_BINARY_DIR}/${CONFIG_VERSION_FILE}"
        DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
